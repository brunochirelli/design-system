{"version":3,"file":"index.cjs.js","sources":["../src/themes/darkTheme.ts","../src/themes/lightTheme.ts","../src/index.ts"],"sourcesContent":["import { ThemeType } from \"../types/types\";\n\nexport const DarkTheme: ThemeType = {\n  Colors: {\n    \"primary-100\": \"red\",\n    \"primary-200\": \"red\",\n    \"primary-300\": \"red\",\n    \"primary-400\": \"red\",\n    \"primary-500\": \"red\",\n  },\n  Spacings: {\n    xs: \"0.5rem\",\n    sm: \"1rem\",\n    md: \"1.5rem\",\n    lg: \"2rem\",\n  },\n};\n","import { ThemeType } from \"../types/types\";\n\nexport const LightTheme: ThemeType = {\n  Colors: {\n    \"primary-100\": \"red\",\n    \"primary-200\": \"red\",\n    \"primary-300\": \"red\",\n    \"primary-400\": \"red\",\n    \"primary-500\": \"red\",\n  },\n  Spacings: {\n    xs: \"0.5rem\",\n    sm: \"1rem\",\n    md: \"1.5rem\",\n    lg: \"2rem\",\n  },\n};\n","import { ThemeType, ThemesType } from \"types/types\";\nimport { DarkTheme } from \"./themes/darkTheme\";\nimport { LightTheme } from \"./themes/lightTheme\";\n\nconst DefineThemes = (\n  customThemes?: Record<string, ThemeType>\n): ThemesType => ({\n  light: LightTheme,\n  dark: DarkTheme,\n  ...customThemes,\n});\n\nconst buildTheme = (\n  theme: keyof ThemesType = \"light\",\n  override?: Partial<ThemeType>\n): ThemeType => {\n  const currentTheme = DefineThemes()[theme];\n  return { ...currentTheme, ...override };\n};\n\ntype CssVariablesType = {\n  [key: string]: string;\n};\n\nconst flattenAndMergeObject = (\n  obj: ThemeType,\n  prefix = \"\"\n): CssVariablesType => {\n  const flattenedObj: CssVariablesType = {};\n  const lowerCasePrefix = prefix.toLowerCase();\n\n  for (const key in obj) {\n    if (\n      typeof obj[key as keyof ThemeType] === \"object\" &&\n      obj[key as keyof ThemeType] !== null\n    ) {\n      for (const subKey in obj[key as keyof ThemeType]) {\n        flattenedObj[\n          `${\n            prefix.length > 0 ? \"--\" + lowerCasePrefix + \"\" : \"-\"\n          }-${key.toLocaleLowerCase()}-${subKey}`\n        ] =\n          obj[key as keyof ThemeType][\n            subKey as keyof ThemeType[keyof ThemeType]\n          ];\n      }\n    } else {\n      // @ts-expect-error - I don't know how to fix this\n      flattenedObj[key] = obj[key as string];\n    }\n  }\n\n  return flattenedObj;\n};\n\nconst transformThemeToCssTokens = (prefix: string) => {\n  const currentTheme = buildTheme();\n  const flattenTheme = flattenAndMergeObject(currentTheme, prefix);\n\n  for (const key in flattenTheme) {\n    if (Object.prototype.hasOwnProperty.call(flattenTheme, key)) {\n      document.documentElement.style.setProperty(`${key}`, flattenTheme[key]);\n    }\n  }\n};\n\nexport const setTokens = (prefix: string) => {\n  transformThemeToCssTokens(prefix);\n};\n"],"names":["DarkTheme","LightTheme","DefineThemes","customThemes","buildTheme","theme","override","flattenAndMergeObject","obj","prefix","flattenedObj","lowerCasePrefix","key","subKey","transformThemeToCssTokens","currentTheme","flattenTheme","setTokens"],"mappings":"gFAEO,MAAMA,EAAuB,CAClC,OAAQ,CACN,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,KACjB,EACA,SAAU,CACR,GAAI,SACJ,GAAI,OACJ,GAAI,SACJ,GAAI,MACN,CACF,ECdaC,EAAwB,CACnC,OAAQ,CACN,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,KACjB,EACA,SAAU,CACR,GAAI,SACJ,GAAI,OACJ,GAAI,SACJ,GAAI,MACN,CACF,ECZMC,EACJC,IACgB,CAChB,MAAOF,EACP,KAAMD,EACN,GAAGG,CACL,GAEMC,EAAa,CACjBC,EAA0B,QAC1BC,KAGO,CAAE,GADYJ,IAAeG,CAAK,EACf,GAAGC,IAOzBC,EAAwB,CAC5BC,EACAC,EAAS,KACY,CACrB,MAAMC,EAAiC,CAAA,EACjCC,EAAkBF,EAAO,cAE/B,UAAWG,KAAOJ,EAEd,GAAA,OAAOA,EAAII,CAAsB,GAAM,UACvCJ,EAAII,CAAsB,IAAM,KAErB,UAAAC,KAAUL,EAAII,CAAsB,EAC7CF,EACE,GACED,EAAO,OAAS,EAAI,KAAOE,EAAuB,OAChDC,EAAI,uBAAuBC,GACjC,EACEL,EAAII,CAAsB,EACxBC,CACF,OAISH,EAAAE,CAAG,EAAIJ,EAAII,CAAa,EAIlC,OAAAF,CACT,EAEMI,EAA6BL,GAAmB,CACpD,MAAMM,EAAeX,IACfY,EAAeT,EAAsBQ,EAAcN,CAAM,EAE/D,UAAWG,KAAOI,EACZ,OAAO,UAAU,eAAe,KAAKA,EAAcJ,CAAG,GACxD,SAAS,gBAAgB,MAAM,YAAY,GAAGA,IAAOI,EAAaJ,CAAG,CAAC,CAG5E,EAEaK,EAAaR,GAAmB,CAC3CK,EAA0BL,CAAM,CAClC"}